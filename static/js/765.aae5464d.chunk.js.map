{"version":3,"file":"static/js/765.aae5464d.chunk.js","mappings":"8PAEaA,EAAYC,EAAAA,GAAAA,IAAH,0FAMTC,EAAOD,EAAAA,GAAAA,IAAH,2JAOJE,EAAQF,EAAAA,GAAAA,IAAH,uE,kBCVZG,GAAaH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,+OAeHK,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACJ,EAAD,CAAYG,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,E,SCmCD,EArDqB,WAAO,IAAD,IACjBE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAMjB,IAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBR,GAASS,KAAKL,EAC/B,GAAE,CAACJ,KAECG,EACH,OAAO,KAET,IAAQO,EAAgEP,EAAhEO,eAAgBC,EAAgDR,EAAhDQ,YAAaC,EAAmCT,EAAnCS,aAAcC,EAAqBV,EAArBU,SAAUC,EAAWX,EAAXW,OACvDC,EAAQ,oBAAGV,EAASW,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAEzC,OACE,UAAC3B,EAAD,YACE,SAACM,EAAD,CAAUC,GAAIkB,EAAd,uBACA,UAACvB,EAAD,YACE,SAACC,EAAD,CACEyB,IAAG,0CAAqCP,GACxCQ,IAAKT,KAGP,4BACE,wBAAKA,KACL,uCAAeU,KAAKC,MAAqB,GAAfT,GAA1B,QACA,sCACA,uBAAIC,KACJ,oCACA,wBACGC,EAAOQ,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACjB,OAAO,wBAAcA,GAALD,EACjB,aAIP,4BACE,oDACA,yBACE,SAAC,KAAD,CAAM1B,GAAI,OAAV,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAI,UAAV,wBAEF,SAAC,EAAA4B,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,WAKT,C,6LC1DDC,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,EAAAA,GAAAA,IAAA,sCAAyCC,IAD3D,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBN,EAAAA,EAAAA,IAAM,yBAAD,OACDC,EADC,kBACgBK,EADhB,YADvB,cACCH,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAevB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BR,GAA/B,wFACkB2B,EAAAA,EAAAA,IAAM,UAAD,OAChB3B,EADgB,oBACG4B,EADH,oBADvB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBlC,GAAzB,wFACkB2B,EAAAA,EAAAA,IAAM,UAAD,OAChB3B,EADgB,4BACW4B,EADX,oBADvB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BnC,GAA5B,wFACkB2B,EAAAA,EAAAA,IAAM,UAAD,OAChB3B,EADgB,4BACW4B,EADX,2BADvB,cACCE,EADD,yBAIEA,EAASC,MAJX,kE","sources":["pages/MovieDetails/MovieDetails.styled.js","components/BackLink/BackLink.jsx","pages/MovieDetails/MovieDetails.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  padding-left: 20px;\n  padding-right: 20px;\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow: rgba(105, 105, 105, 0.4) 0px 5px,\n    rgba(192, 192, 192, 0.3) 0px 10px;\n`;\n\nexport const Image = styled.img`\n  margin-right: 20px;\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: #ff1493;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nBackLink.propTypes = {\n  to: PropTypes.oneOfType([\n    PropTypes.string.isRequired,\n    PropTypes.object.isRequired,\n  ]),\n  children: PropTypes.string.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMoviesById } from 'services/moviesApi';\nimport { Link } from 'react-router-dom';\nimport { Container, Wrap, Image } from './MovieDetails.styled';\nimport { BackLink } from 'components/BackLink/BackLink';\nimport { Suspense } from 'react';\nimport Loader from 'components/Loading/Loading';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchMoviesById(movieId).then(setMovie);\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n  const { original_title, poster_path, vote_average, overview, genres } = movie;\n  const backLink = location.state?.from ?? '/movies';\n\n  return (\n    <Container>\n      <BackLink to={backLink}>Go back </BackLink>\n      <Wrap>\n        <Image\n          src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n          alt={original_title}\n        />\n\n        <div>\n          <h1>{original_title}</h1>\n          <p>User score {Math.round(vote_average * 10)}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <ul>\n            {genres.map(({ id, name }) => {\n              return <li key={id}>{name}</li>;\n            })}\n          </ul>\n        </div>\n      </Wrap>\n      <div>\n        <ul>Additional information</ul>\n        <li>\n          <Link to={'cast'}>Cast</Link>\n        </li>\n        <li>\n          <Link to={'reviews'}>Reviews</Link>\n        </li>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bc4500f3e002eaa279df91f9e5a7b7d1';\n\nexport async function fetchMoviesTrend() {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMoviesByWord(searchQuery) {\n  const response = await axios(\n    `/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`\n  );\n  return response.data;\n}\n\nexport async function fetchMoviesById(movieId) {\n  const response = await axios(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function fetchCast(movieId) {\n  const response = await axios(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function fetchReviews(movieId) {\n  const response = await axios(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n"],"names":["Container","styled","Wrap","Image","StyledLink","Link","BackLink","to","children","size","movieId","useParams","useState","movie","setMovie","location","useLocation","useEffect","fetchMoviesById","then","original_title","poster_path","vote_average","overview","genres","backLink","state","from","src","alt","Math","round","map","id","name","Suspense","fallback","axios","API_KEY","fetchMoviesTrend","response","data","fetchMoviesByWord","searchQuery","fetchCast","fetchReviews"],"sourceRoot":""}